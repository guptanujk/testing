import { body, oneOf, query, validationResult, param } from 'express-validator';

const passwordValidation = (value: string) => {
  const passwordRegex =
    /^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~])[a-zA-Z0-9!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~]/;
  return passwordRegex.test(value);
};


const createUserPolicy = [
  body('fullName')
    .exists()
    .trim()
    .withMessage('fullName is Required').bail()
    .isString()
    .withMessage('Invalid fullName').bail()
    .isLength({ min: 1 })
    .withMessage('fullName is Required').bail(),
  body('dob')
    .trim()
    .exists()
    .withMessage('dob is Required').bail()
    .isString()
    .withMessage('Invalid dob').bail()
    .isLength({ min: 1 })
    .withMessage('dob is Required').bail(),
  body('gender')
    .trim()
    .exists()
    .withMessage('Gender is Required').bail()
    .isString()
    .withMessage('Invalid Gender').bail()
    .isLength({ min: 1 })
    .withMessage('Gender is Required').bail()
    .isIn(['Male','Female'])
    .withMessage('Invalid gender. Expected Male/Female').bail(),
  body('occupation')
    .trim()
    .exists()
    .withMessage('Occupation is Required').bail()
    .isString()
    .withMessage('Invalid occupation').bail()
    .isLength({ min: 1 })
    .withMessage('Occupation is Required').bail()
    .isIn(['Employee','Public Official','Farmer','Unemployed'])
    .withMessage('Invalid Occupation').bail(),
  body('annualIncome')
    .exists()
    .withMessage('annualIncome is Required').bail()
    .isNumeric()
    .withMessage('Invalid annualIncome').bail()
    .isLength({ min: 1 })
    .withMessage('annualIncome is Required').bail(),
  body('smokingStatus')
    .isBoolean()
    .withMessage('Smoking status must be a boolean value (true or false)').bail(),
  body('alcoholConsumption')
    .isBoolean()
    .withMessage('Alchol consumption must be a boolean value (true or false)').bail(),
  body('healthCondition')
    .trim()
    .exists()
    .withMessage('Health condition is Required').bail()
    .isString()
    .withMessage('Invalid Health condition').bail()
    .isLength({ min: 1 })
    .withMessage('Health condition is Required').bail()
    .isLength({ min: 1, max: 255 })
    .withMessage('Health condition must be between 1 to 255 charaters only').bail(),
  body('existingInsurance')
    .isBoolean()
    .withMessage('Existing Insurance must be a boolean value (true or false)').bail(),
  body('existingInsuranceDetails')
    .optional()
    .trim()
    .exists()
    .withMessage('Existing insurance details is Required').bail()
    .isString()
    .withMessage('Invalid Existing insurance details').bail()
    .isLength({ min: 1 })
    .withMessage('Existing insurance details is Required').bail()
    .isLength({ min: 1, max: 255 })
    .withMessage('Existing insurance details must be between 1 to 255 charaters only').bail(),
  body('policyCategory')
    .trim()
    .exists()
    .withMessage('Policy category is Required').bail()
    .isString()
    .withMessage('Invalid Policy category').bail()
    .isLength({ min: 1 })
    .withMessage('Policy category is Required').bail()
    .isIn(['vehicles','travel','health','term'])
    .withMessage('Invalid Policy category. Expected values are vehicles, travel, health, term').bail(),
  body('policySubCategory')
    .trim()
    .exists()
    .withMessage('Policy sub category is Required').bail()
    .isString()
    .withMessage('Invalid Policy sub category').bail()
    .isLength({ min: 1 })
    .withMessage('Policy sub category is Required').bail()
    .isIn(['car','bike','truck','holiday','business','student','individual','family','senior citizen','joint','group'])
    .withMessage('Invalid Policy sub category. Expected values are car, bike, scooty, domestic, international, individual, family floater, life insurance').bail(),
  // 2nd Session
  body('desiredPolicyTerm')
    .exists()
    .withMessage('desiredPolicyTerm is Required').bail()
    .isNumeric()
    .withMessage('Invalid desiredPolicyTerm').bail()
    .isIn([1, 2, 3, 5, 10, 15, 20, 25, 30])
    .withMessage('Invalid desiredPolicyTerm. Expected values are 1, 2, 3, 5, 10, 15, 20, 25, 30').bail(),
  body('startDate')
    .trim()
    .exists()
    .withMessage('startDate is Required').bail()
    .isString()
    .withMessage('Invalid startDate').bail()
    .isLength({ min: 1 })
    .withMessage('startDate is Required').bail(),
  body('typeOfPolicy')
    .trim()
    .exists()
    .withMessage('Type of policy is Required').bail()
    .isString()
    .withMessage('Invalid Type of policy').bail()
    .isLength({ min: 1 })
    .withMessage('Type of policy is Required').bail()
    .isIn(['Level Term', 'Decreasing Term', 'Increasing Term', 'Convertible Term', 'Renewable Term', 'Return of Premium'])
    .withMessage('Invalid Type of policy. Expected Level Term,/ Decreasing Term/ Increasing Term/ Convertible Term/ Renewable Term/ Return of Premium').bail(),
  body('desiredCoverageAmount')
    .exists()
    .withMessage('desiredCoverageAmount is Required').bail()
    .isNumeric()
    .withMessage('Invalid desiredCoverageAmount').bail()
    .isLength({ min: 1 })
    .withMessage('desiredCoverageAmount is Required').bail()
    .isIn([5000000, 7000000, 10000000, 20000000, 30000000, 40000000, 50000000])
    .withMessage('Invalid desiredPolicyTerm. Expected values are 5000000, 7000000, 10000000, 20000000, 30000000, 40000000, 50000000').bail(),
  body('premium')
    .exists()
    .withMessage('premium is Required').bail()
    .isNumeric()
    .withMessage('Invalid premium').bail()
    .isLength({ min: 1 })
    .withMessage('premium is Required').bail(),
  // 3rd Session
  body('beneficiaryDetails')
    .isArray({ min: 1 })
    .withMessage('Beneficiary details must be an array with at least one beneficiary').bail(),
  body('beneficiaryDetails.*.beneficiaryName')
    .trim()
    .exists()
    .withMessage('Beneficiary name is Required').bail()
    .isString()
    .withMessage('Invalid Beneficiary name').bail()
    .isLength({ min: 1 })
    .withMessage('Beneficiary name is Required').bail()
    .isLength({ min: 1, max: 255 })
    .withMessage('Beneficiary name must be between 1 to 255 charaters only').bail(),
  body('beneficiaryDetails.*.beneficiaryRelation')
    .trim()
    .exists()
    .withMessage('Beneficiary relation is Required').bail()
    .isString()
    .withMessage('Invalid Beneficiary relation').bail()
    .isLength({ min: 1 })
    .withMessage('Beneficiary relation is Required').bail()
    .isLength({ min: 1, max: 100 })
    .withMessage('Beneficiary relation must be between 1 to 100 charaters only').bail(),
  body('beneficiaryDetails.*.beneficiaryDob')
    .trim()
    .exists()
    .withMessage('Beneficiary dob is Required').bail()
    .isString()
    .withMessage('Invalid Beneficiary dob').bail()
    .isLength({ min: 1 })
    .withMessage('Beneficiary dob is Required').bail(),
  body('beneficiaryDetails.*.beneficiaryPhone')
    .trim()
    .exists()
    .withMessage('Beneficiary phone is Required').bail()
    .isString()
    .withMessage('Invalid Beneficiary phone').bail()
    .isLength({ min: 1 })
    .withMessage('Beneficiary phone is Required').bail()
    .isLength({ min: 6, max: 15 })
    .withMessage('Beneficiary phone must be between 6 to 15 charaters only').bail(),
  body('beneficiaryDetails.*.beneficiaryEmail')
    .trim()
    .exists()
    .withMessage('Beneficiary email is Required').bail()
    .isString()
    .withMessage('Invalid Beneficiary email').bail()
    .isLength({ min: 1 })
    .withMessage('Beneficiary email is Required').bail()
    .isEmail()
    .withMessage('Invalid Beneficiary email').bail(),
  // body('beneficiaryDetails.*.beneficiaryShare')
  //   .optional()
  //   .exists()
  //   .withMessage('Beneficiary share is Required').bail()
  //   .isNumeric()
  //   .withMessage('Invalid Beneficiary share').bail()
  //   .isLength({ min: 1 })
  //   .withMessage('Beneficiary share is Required').bail(),
  // 4th Session
  body('height')
    .exists()
    .withMessage('height is Required').bail()
    .isNumeric()
    .withMessage('Invalid height').bail()
    .isLength({ min: 1 })
    .withMessage('height is Required').bail(),
  body('weight')
    .exists()
    .withMessage('weight is Required').bail()
    .isNumeric()
    .withMessage('Invalid weight').bail()
    .isLength({ min: 1 })
    .withMessage('weight is Required').bail(),
  body('medicalHistory')
    .trim()
    .exists()
    .withMessage('Medical history is Required').bail()
    .isString()
    .withMessage('Invalid Medical history').bail()
    .isLength({ min: 1 })
    .withMessage('Medical history is Required').bail(),
  body('currentMedications')
    .trim()
    .exists()
    .withMessage('Current medications is Required').bail()
    .isString()
    .withMessage('Invalid Current medications').bail()
    .isLength({ min: 1 })
    .withMessage('Current medications is Required').bail(),
  body('historyOfFamilyDiseases')
    .trim()
    .exists()
    .withMessage('Family history of diseases is Required').bail()
    .isString()
    .withMessage('Invalid Family history of diseases').bail()
    .isLength({ min: 1 })
    .withMessage('Family history of diseases is Required').bail(),
  body('surgeriesPast5Years')
    .isBoolean()
    .withMessage('surgeriesPast5Years must be a boolean value (true or false)').bail(),
  body('doctorsContact')
    .optional()
    .trim()
    .exists()
    .withMessage('Doctors contact is Required').bail()
    .isString()
    .withMessage('Invalid Doctors contact').bail()
    .isLength({ min: 1 })
    .withMessage('Doctors contact is Required').bail()
    .isLength({ min: 1, max: 255 })
    .withMessage('Doctors contact must be between 1 to 255 charaters only').bail(),
  body('consentToMedicalExam')
    .isBoolean()
    .withMessage('consentToMedicalExam must be a boolean value (true or false)').bail(),
  // 5th Session
  body('email')
    .exists()
    .withMessage('Email is Required').bail()
    .isString()
    .withMessage('Invalid Email').bail()
    .isLength({ min: 1 })
    .withMessage('Email is Required').bail()
    .isEmail()
    .withMessage('Invalid Email').bail(),
  body('phoneNumber')
    .trim()
    .exists()
    .withMessage('Phone number is Required').bail()
    .isString()
    .withMessage('Invalid Phone number').bail()
    .isLength({ min: 1 })
    .withMessage('Phone number is Required').bail()
    .isLength({ min: 6, max: 15 })
    .withMessage('Phone number must be between 6 to 15 charaters only').bail(),
  body('addressLine1')
    .trim()
    .exists()
    .withMessage('Address line 1 is Required').bail()
    .isString()
    .withMessage('Invalid Address line 1').bail()
    .isLength({ min: 1 })
    .withMessage('Address line 1 is Required').bail()
    .isLength({ min: 1, max: 255 })
    .withMessage('Address line 1 must be between 1 to 255 charaters only').bail(),
  body('addressLine2')
    .optional()
    .trim()
    .exists()
    .withMessage('Address line 2 is Required').bail()
    .isString()
    .withMessage('Invalid Address line 2').bail()
    .isLength({ min: 1 })
    .withMessage('Address line 2 is Required').bail()
    .isLength({ min: 1, max: 255 })
    .withMessage('Address line 2 must be between 1 to 255 charaters only').bail(),
  body('city')
    .trim()
    .exists()
    .withMessage('City is Required').bail()
    .isString()
    .withMessage('Invalid City').bail()
    .isLength({ min: 1 })
    .withMessage('City is Required').bail()
    .isLength({ min: 1, max: 100 })
    .withMessage('City must be between 1 to 100 charaters only').bail(),
  body('stateId')
    .exists()
    .withMessage('stateId is Required').bail()
    .isNumeric()
    .withMessage('Invalid stateId').bail()
    .isLength({ min: 1 })
    .withMessage('stateId is Required').bail(),
  body('zipCode')
    .trim()
    .exists()
    .withMessage('Zip code is Required').bail()
    .isString()
    .withMessage('Invalid Zip code').bail()
    .isLength({ min: 1 })
    .withMessage('Zip code is Required').bail()
    .isLength({ min: 3, max: 10 })
    .withMessage('Zip code must be between 3 to 10 charaters only').bail(),
  body('countryId')
    .exists()
    .withMessage('countryId is Required').bail()
    .isNumeric()
    .withMessage('Invalid countryId').bail()
    .isLength({ min: 1 })
    .withMessage('countryId is Required').bail(),
];

const getPoliciesList = [
    body('page')
        .optional({nullable: true})
        .trim()
        .exists()
        .withMessage('Invalid page number')
        .isInt()
        .withMessage('Invalid page number'),
    body('limit')
        .optional({nullable: true})
        .trim()
        .exists()
        .withMessage('Invalid limit')
        .isInt()
        .withMessage('Invalid limit'),
    body('search')
        .optional({nullable: true})
        .trim()
        .exists()
        .withMessage('Invalid search string'),
    body('category')
        .optional({nullable: true})
        .trim()
        .exists()
        .withMessage('Invalid category'),
    body('createdOn')
      .optional({nullable: true})
      .exists()
      .isDate()
      .withMessage('Invalid createdOn date'),
    body('status')
       .optional({nullable: true})
       .trim()
       .exists()
       .isString()
       .withMessage('Invalid status')
       .isIn(['active','inactive'])
];
export default {
  createUserPolicy,
  getPoliciesList
};
